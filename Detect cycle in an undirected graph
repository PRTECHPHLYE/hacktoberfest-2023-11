Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.

Example 1:

Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1



def isCyclicUtil(v, visited, parent, adj):
    visited[v] = True
    for i in adj[v]:
        if visited[i] == False:
            if isCyclicUtil(i, visited, v, adj):
                return True
        elif parent != i:
            return True
    return False

def isCyclic(V, adj):
    visited = [False] * V
    for i in range(V):
        if visited[i] == False:
            if isCyclicUtil(i, visited, -1, adj):
                return 1
    return 0

# Example usage:
if __name__ == "__main__":
    V = 5
    adj = [[1], [0, 2, 4], [1, 3], [2, 4], [1, 3]]
    result = isCyclic(V, adj)
    print(result)
